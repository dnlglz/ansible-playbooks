" [ 0 ] VUNDLE {{{

set nocompatible
filetype off
set rtp+=~/.fzf

"}}}

" [ 1 ] THEME {{{

if $TERM == "xterm-256color"
set t_Co=256
endif

highlight LineNr ctermfg=grey

syntax enable

set background=dark
let g:solarized_contrast="high"
let g:solarized_visibility="low"
let g:solarized_termcolors=256
let html_use_css=1

try
colorscheme solarized
catch /^Vim\%((\a\+)\)\=:E185/
colorscheme slate
endtry

highlight Normal ctermbg=NONE
highlight nonText ctermbg=NONE

"}}}

" [ 2 ] SETTINGS {{{

filetype on
filetype plugin on
filetype indent on

set autoindent
set autoread
set complete+=k
set copyindent
set cursorcolumn
set cursorline
set dictionary=~/.vimrc
set encoding=utf-8
set expandtab
set exrc                                    " Enables run local config
set foldmethod=marker
set hidden
set hlsearch
set ignorecase
set laststatus=2
set lazyredraw
set list listchars=trail:·,tab:»·,eol:¬
set noautochdir
set nobackup
set noshowmode
set noswapfile
set notimeout
set nowrap
set nowritebackup
set nu
set rnu
set ruler
set scrolloff=5
set secure                                  " Disallows the use of :autocmd, shell and write commands in local .vimrc files
set shell=/bin/sh
set shiftround
set shiftwidth=4
set smartcase
set smarttab
set softtabstop=4
set splitbelow splitright
set tabstop=4
set tags=tags,.tags
set title
set ttimeout
set ttimeoutlen=100
set ttyfast
set undodir=~/.vim/undo
set undofile
set undolevels=1000
set undoreload=10000
set virtualedit=all
set wildcharm=<Tab>
set wildmenu wildmode=full

let g:AutoPairsShortcutFastWrap = '<C-f>'
let g:AutoPairsShortcutToggle = '<C-h>'
let g:slime_target = "tmux"
let g:slime_python_ipython = 1
let g:slime_default_config = {"socket_name": "default", "target_pane": "{last}"}
let g:netrw_liststyle=3
let g:netrw_banner=0

let g:deoplete#enable_at_startup = 1

"" Trigger configuration. Do not use <tab> if you use
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

function! StatusLine(current)
  return (a:current ? crystalline#mode() . '%#Crystalline#' : '%#CrystallineInactive#')
        \ . ' %f%h%w%m%r '
        \ . (a:current ? '%#CrystallineFill# %{fugitive#head()} ' : '')
        \ . '%=' . (a:current ? '%#Crystalline# %{&paste?"PASTE ":""}%{&spell?"SPELL ":""}' . crystalline#mode_color() : '')
        \ . ' %{&ft}[%{&enc}][%{&ffs}] %l/%L %c%V %P '
endfunction

function! TabLine()
  let l:vimlabel = has("nvim") ?  " NVIM " : " VIM "
  return crystalline#bufferline(2, len(l:vimlabel), 1) . '%=%#CrystallineTab# ' . l:vimlabel
endfunction

let g:crystalline_statusline_fn = 'StatusLine'
let g:crystalline_tabline_fn = 'TabLine'
let g:crystalline_theme = 'jellybeans'

set showtabline=2
set laststatus=2

"}}}

" [ 3 ] MAPS {{{
let mapleader=","

inoremap <c-c> <Esc>

map <leader>e :e $MYVIMRC<CR>
map <space> <Plug>(easymotion-sn)
map M-n <Plug>(easymotion-next)
map M-N <Plug>(easymotion-prev)
map ' `
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>h <Plug>(easymotion-linebackward)

map <Leader>a :Ag<CR>
map <Leader>b :Buffers<CR>
map <Leader>f :Files<CR>
map <Leader>m :Marks<CR>
map <Leader>t :Tags<CR>
map <Leader>r :w !bash<cr>
map <Leader>c :!iconv -f utf8 -t ascii//TRANSLIT <cr>
map <Leader>w :w<cr>

let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
nmap <silent> <F3> :Lex<CR>
nmap <silent> <F5> :!ctags -R -f .tags .<CR>
nmap <silent> ,<space> :nohlsearch<CR>
nmap <Leader>zi :tabnew %<CR>
nmap <Leader>zo :tabclose<CR>

nnoremap <silent> <c-l> :SlimeSend1 <cr>
nnoremap Q @
nnoremap @ Q

omap <space> <Plug>(easymotion-tn)

"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

"}}}

" [ 4 ] ABBREVIATIONS {{{
iab _dt <c-r>=strftime("%Y-%m-%d %H:%M:%S")<cr>
iab _d <c-r>=strftime("%Y-%m-%d")<cr>
iab _t <c-r>=strftime("%H:%M:%S")<cr>
"}}}

" [ 5 ] AUTOCMD {{{
autocmd Filetype gitcommit setlocal textwidth=72
augroup RemoveTrailingWSOnWrite
    autocmd!
    autocmd BufWritePre * :execute "normal mc" | :%s/\s\+$//e | :normal `c
augroup END
" }}}

